rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isAuth() {
      return request.auth != null;
    }

    // Checks if the user's UID is in the `memberUids` array of a project.
    function isProjectMember(projectId) {
      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    // Checks if the user is the owner of the project.
    function isProjectOwner(projectId) {
      return request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid;
    }

    // =================================
    // Collection Rules
    // =================================

    // --- User & Settings ---
    match /users/{userId} {
      allow read, update: if isAuth() && request.auth.uid == userId;
      allow create: if isAuth();
    }
    
    match /settings/{docId} {
      allow read: if isAuth();
      // Only allow updating the global currency setting, not creating new setting docs.
      allow write: if isAuth() && docId == 'global';
    }

    // --- Project Document ---
    match /projects/{projectId} {
      allow read: if isAuth() && isProjectMember(projectId);
      allow create: if isAuth();
      // Any member can update the project for now. Refine to editor/owner later if needed.
      allow update: if isAuth() && isProjectMember(projectId); 
      allow delete: if isAuth() && isProjectOwner(projectId);
    }
    
    // --- Generic Project Sub-Collection Rules ---
    // This rule applies to any document in any collection that is a sub-collection of a project.
    // We check that the document being created/modified has a `projectId` field that matches a project the user is a member of.
    match /{path=**}/{docId} {
        // Read: Allow if the user is a member of the project linked in the document.
        allow read: if isAuth() && isProjectMember(resource.data.projectId);

        // Create: Allow if the user is a member of the project linked in the new document.
        allow create: if isAuth() && isProjectMember(request.resource.data.projectId);
                                    
        // Update, Delete: Allow if the user is a member of the project linked in the *existing* document.
        allow update, delete: if isAuth() && isProjectMember(resource.data.projectId);
    }

    // --- Personal Collections (Wallet, Expenses, Vault) ---
    // These collections are not tied to a project, but directly to a user.
    match /personalWallets/{docId} {
      allow read, write: if isAuth() && request.auth.uid == resource.data.userId;
      allow create: if isAuth() && request.auth.uid == request.resource.data.userId;
    }

    match /personalWallets/{walletId}/walletTransactions/{txId} {
      allow read, create: if isAuth() && get(/databases/$(database)/documents/personalWallets/$(walletId)).data.userId == request.auth.uid;
      allow update, delete: if false; // Transactions should be immutable
    }

    match /personalExpenses/{docId} {
      allow read, write: if isAuth() && request.auth.uid == resource.data.userId;
      allow create: if isAuth() && request.auth.uid == request.resource.data.userId;
    }

    match /personalExpenseCategories/{docId} {
      allow read, write: if isAuth() && request.auth.uid == resource.data.userId;
      allow create: if isAuth() && request.auth.uid == request.resource.data.userId;
    }

    match /vaultFolders/{docId} {
      allow read, write: if isAuth() && request.auth.uid == resource.data.userId;
      allow create: if isAuth() && request.auth.uid == request.resource.data.userId;
    }

    match /vaultItems/{docId} {
      allow read, write: if isAuth() && request.auth.uid == resource.data.userId;
      allow create: if isAuth() && request.auth.uid == request.resource.data.userId;
    }
  }
}