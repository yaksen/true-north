rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isAuth() {
      return request.auth != null;
    }

    function isProjectMember(projectId) {
      // Use `exists` which is more efficient and handles null checks.
      return exists(/databases/$(database)/documents/projects/$(projectId)) &&
             request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    function isProjectOwner(projectId) {
        return exists(/databases/$(database)/documents/projects/$(projectId)) &&
               get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;
    }
    
    // For now, we are simplifying editor logic. 
    // A more robust solution would involve checking a 'roles' map.
    // We will grant update/delete to any project member for simplicity,
    // as only authenticated members can access project data anyway.
    function isProjectEditor(projectId) {
        return isProjectMember(projectId);
    }

    // =================================
    // Collection Rules
    // =================================

    // --- User & Settings ---
    match /users/{userId} {
      allow read, update: if isAuth() && request.auth.uid == userId;
      allow create: if isAuth();
    }
    
    match /settings/{docId} {
      allow read: if isAuth();
      // Allow any authenticated user to write to settings (e.g., for currency)
      // In a multi-tenant app, you might restrict this to an admin role.
      allow write: if isAuth(); 
    }

    // --- Project Document ---
    match /projects/{projectId} {
      allow read: if isAuth() && isProjectMember(projectId);
      allow create: if isAuth(); // Any authenticated user can create a project
      allow update: if isAuth() && isProjectEditor(projectId);
      allow delete: if isAuth() && isProjectOwner(projectId);
    }
    
    // --- Generic Project Sub-Collection Rules ---
    function projectSubCollectionRules() {
      return {
        // Allow read, create, update, delete if the user is a member of the project.
        'allow read, create, update, delete': if isAuth() && isProjectMember(request.resource.data.projectId)
      }
    }

    // Apply generic rules to all project sub-collections
    match /tasks/{docId} { rules projectSubCollectionRules(); }
    match /leads/{docId} { rules projectSubCollectionRules(); }
    match /channels/{docId} { rules projectSubCollectionRules(); }
    match /vendors/{docId} { rules projectSubCollectionRules(); }
    match /partners/{docId} { rules projectSubCollectionRules(); }
    match /categories/{docId} { rules projectSubCollectionRules(); }
    match /services/{docId} { rules projectSubCollectionRules(); }
    match /products/{docId} { rules projectSubCollectionRules(); }
    match /packages/{docId} { rules projectSubCollectionRules(); }
    match /notes/{docId} { rules projectSubCollectionRules(); }
    match /aiPrompts/{docId} { rules projectSubCollectionRules(); }
    match /reports/{docId} { rules projectSubCollectionRules(); }
    match /records/{docId} { rules projectSubCollectionRules(); }
    match /taskTemplates/{docId} { rules projectSubCollectionRules(); }
    match /finances/{docId} { rules projectSubCollectionRules(); }
    match /invoices/{docId} { rules projectSubCollectionRules(); }

    // --- Personal Collections (Wallet, Expenses, Vault) ---
    function userOwnedResourceRules() {
       return {
         'allow read, write': if isAuth() && request.auth.uid == resource.data.userId,
         'allow create': if isAuth() && request.auth.uid == request.resource.data.userId
       }
    }

    match /personalWallets/{docId} { rules userOwnedResourceRules(); }
    match /walletTransactions/{docId} {
      allow read, create: if isAuth() && get(/databases/$(database)/documents/personalWallets/$(request.resource.data.walletId)).data.userId == request.auth.uid;
      allow update, delete: if false; // Transactions should be immutable
    }
    match /personalExpenses/{docId} { rules userOwnedResourceRules(); }
    match /personalExpenseCategories/{docId} { rules userOwnedResourceRules(); }
    match /vaultFolders/{docId} { rules userOwnedResourceRules(); }
    match /vaultItems/{docId} { rules userOwnedResourceRules(); }
  }
}
