rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to get user roles
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isUserAdmin(userId) {
      return getUserRole(userId) == 'admin';
    }
    
    function isUserOwner(userId) {
        // In this security model, the document owner is the user whose UID matches the {userId} wildcard.
        return request.auth.uid == userId;
    }
    
    // Global settings can be read by any authenticated user (for signup page), but only written by admins.
    match /settings/crm {
        allow read: if request.auth != null;
        allow write: if isUserAdmin(request.auth.uid);
    }

    // User profiles
    match /users/{userId} {
      // Allow user creation (signup) for anyone.
      allow create: if request.auth.uid == userId;
      
      // A user can read/update their own profile. Admins can read/update any profile.
      allow read, update: if isUserOwner(userId) || isUserAdmin(request.auth.uid);

      // Only admins can delete users (but not themselves).
      allow delete: if isUserAdmin(request.auth.uid) && request.auth.uid != userId;
    }
    
    // User-specific subcollections (e.g., leads, services, projects)
    match /users/{userId}/{collection}/{docId} {
    
        // Default rule: A user can only access their own documents. Admins can access anyone's.
        allow read, write: if isUserOwner(userId) || isUserAdmin(request.auth.uid);
        
        // Specific rule for private projects:
        // A user can read a project if they own it, are an admin, OR if the project is not private,
        // OR if it is private and they are a member.
        match /projects/{projectId} {
            allow read: if isUserOwner(userId) || isUserAdmin(request.auth.uid) 
                || resource.data.private == false
                || (resource.data.private == true && request.auth.uid in resource.data.members);
                
            // Write access remains governed by the parent rule (owner or admin).
            allow write: if isUserOwner(userId) || isUserAdmin(request.auth.uid);
        }
    }
  }
}