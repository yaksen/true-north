rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // =============================================
    // Helper Functions
    // =============================================
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // =============================================
    // User Profiles
    // =============================================
    match /users/{userId} {
      allow read, update: if isUser(userId);
      // Deny creation and deletion of user profiles from the client.
      // Creation is handled by the backend on signup.
      allow create, delete: if false;
    }
    
    // =============================================
    // Settings
    // =============================================
    // Allow any signed-in user to read global settings.
    // Writing should be restricted to admins in a real app, but for now allow any user.
    match /settings/global {
       allow read: if isSignedIn();
       allow write: if isSignedIn(); 
    }
    
    // =============================================
    // Personal Collections (Wallet, Expenses, Vault)
    // =============================================
    function isOwner(collectionName, resourceId) {
        return isUser(get(/databases/$(database)/documents/$(collectionName)/$(resourceId)).data.userId);
    }
    
    match /personalWallets/{walletId} {
        allow read, write: if isUser(walletId); // Wallet ID is the user's UID
    }
    
    match /walletTransactions/{txId} {
      // Allow read/write if the user owns the wallet associated with the transaction
      allow read, write: if isUser(get(/databases/$(database)/documents/walletTransactions/$(txId)).data.walletId);
    }
    
    match /personalExpenses/{expenseId} {
       allow read, write, delete: if isOwner('personalExpenses', expenseId);
       allow create: if isUser(request.resource.data.userId);
    }
    
    match /personalExpenseCategories/{categoryId} {
        allow read, write, delete: if isOwner('personalExpenseCategories', categoryId);
        allow create: if isUser(request.resource.data.userId);
    }
    
    match /vaultFolders/{folderId} {
        allow read, write, delete: if isOwner('vaultFolders', folderId);
        allow create: if isUser(request.resource.data.userId);
    }
    
    match /vaultItems/{itemId} {
        allow read, write, delete: if isOwner('vaultItems', itemId);
        allow create: if isUser(request.resource.data.userId);
    }

    // =============================================
    // Project-Based Collections
    // =============================================
    function isProjectMember(projectId) {
      return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    function isProjectOwnerOrEditor(projectId) {
        let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;
        // Find the member object for the current user
        let member = projectData.members.filter(m => m.uid == request.auth.uid)[0];
        
        return isProjectMember(projectId) && (projectData.ownerUid == request.auth.uid || member.role == 'editor');
    }
    
    match /projects/{projectId} {
        allow read: if isProjectMember(projectId);
        allow create: if isUser(request.resource.data.ownerUid);
        allow update: if isProjectOwnerOrEditor(projectId);
        allow delete: if get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;
    }
    
    match /{collection}/{docId} {
      // This rule applies to all project-related collections like tasks, leads, invoices, etc.
      // It checks the `projectId` field on the document.
      allow read, delete: if isProjectMember(get(/databases/$(database)/documents/$(collection)/$(docId)).data.projectId);
      allow create, update: if isProjectMember(request.resource.data.projectId);
    }
  }
}
